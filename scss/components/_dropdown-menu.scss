// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////////////////////////////////////////
/// @group dropdown-menu
////////////////////////////////////////

//--------------------------------------
// Colors
//
/// Sets dropdown menu arrow color if arrow is used.
/// @type Color
$dropdownmenu-arrow-color: $global-dropdownmenu-arrow-color !default;

/// Background color for dropdowns.
/// @type Color
$dropdownmenu-background: $global-dropdownmenu-background !default;

/// Background color for dropdowns.
/// @type Color
$dropdownmenu-submenu-background: $global-dropdownmenu-submenu-background !default;

/// Text color of an active dropdown menu item. Explicit override for menu defaults
/// @type Color
$dropdown-menu-item-color-active: $global-dropdown-menu-item-color-active !default;

/// Background color of an active dropdown menu item. Explicit override for menu defaults
/// @type Color
$dropdown-menu-item-background-active: $global-dropdown-menu-item-background-active !default;


$dropdownmenu-background-active: $global-dropdownmenu-background-active !default;
$dropdownmenu-color-active: $global-dropdownmenu-color-active !default;
$dropdownmenu-hover-background: $global-dropdownmenu-hover-background !default;
$dropdownmenu-hover-color: $global-dropdownmenu-hover-color !default; // inherit
$dropdownmenu-border-color: $global-dropdownmenu-border-color !default;
$dropdownmenu-shadow: $global-dropdownmenu-shadow !default;


//--------------------------------------
// Content
//

$dropdownmenu-arrows-down-content: $global-dropdownmenu-arrows-down-content !default;
$dropdownmenu-arrow-right-content: $global-dropdownmenu-arrow-right-content !default;
$dropdownmenu-arrow-left-content: $global-dropdownmenu-arrow-left-content !default;


//--------------------------------------
// Border width
//

$dropdownmenu-border-width: $global-border-width !default;


//--------------------------------------
// Radius
//

$dropdownmenu-border-radius: $global-radius !default;


//--------------------------------------
// Status
//
/// Enables arrows for items with dropdown menus.
/// @type Boolean
$dropdownmenu-arrows-status: true !default;


$dropdownmenu-border-status: true !default;
$dropdownmenu-border-radius-status: true !default;
$dropdownmenu-vertical-status: true !default;
$dropdownmenu-shadow-status: false !default;


//--------------------------------------
// Sizes
//
/// Minimum width of dropdown sub-menus.
/// @type Length
$dropdownmenu-min-width: rem-calc(200) !default;

/// Border for dropdown sub-menus.
/// @type List
$dropdownmenu-border: $dropdownmenu-border-width solid $dropdownmenu-border-color !default;

// Border width for dropdown sub-menus.
// Used to adjust top margin of a sub-menu if a border is used.
// @type Length
$dropdownmenu-border-width: nth($dropdownmenu-border, 1);

/// Sets dropdown menu arrow size if arrow is used.
/// @type Length
$dropdownmenu-arrow-size: rem-calc(10) !default;

// Sets dropdown menu arrow padding for aligning the arrow correctly.
/// @type Length
$dropdownmenu-arrow-padding: 1.5rem !default;

/// Padding for top level items.
/// @type Number
$dropdownmenu-padding: $global-menu-padding !default;

/// Sets dropdown menu nested margin
/// @type Number
$dropdownmenu-nested-margin: 0 !default;

/// Padding for sub-menu items.
/// @type Number
$dropdownmenu-submenu-padding: $dropdownmenu-padding !default;


$dropdownmenu-arrows-down-margin-right: 0 !default;
$dropdownmenu-arrows-right: rem-calc(10) !default;
$dropdownmenu-horizontal-arrows-font-size: rem-calc(8) !default;
$dropdownmenu-arrows-left-margin-right: rem-calc(10) !default;
$dropdownmenu-width-when-vertical: rem-calc(200) !default;


////////////////////////////////////////
////////////////////////////////////////
////////////////////////////////////////
/// Dropdown-menu
////////////////////////////////////////

@mixin zf-dropdown-left-right-arrows {
  > a::after {
    #{$global-right}: $dropdownmenu-arrows-right;

    @if $dropdownmenu-horizontal-arrows-font-size != $menu-font-size {
      font-size: $dropdownmenu-horizontal-arrows-font-size;
      margin-top: -(($menu-font-size - $dropdownmenu-horizontal-arrows-font-size) / 2);
      top: 50%;
    }
  }

  &.opens-left > a::after {
    content: $dropdownmenu-arrow-left-content;

    // float: left;
    // margin-left: 0;
    // @if $dropdownmenu-arrows-left-margin-right != 0 {
    //   margin-right: $dropdownmenu-arrows-left-margin-right;
    // }
  }

  &.opens-right > a::after {
    content: $dropdownmenu-arrow-right-content;
  }
}

@mixin dropdown-menu-direction($dir: horizontal) {
  @if $dir == horizontal {
    > li.opens-left { // sass-lint:disable-line no-qualifying-elements
      > .is-dropdown-submenu {
        left: auto;
        right: 0;
        top: 100%;
      }
    }

    > li.opens-right { // sass-lint:disable-line no-qualifying-elements
      > .is-dropdown-submenu {
        left: 0;
        right: auto;
        top: 100%;
      }
    }

    @if $dropdownmenu-arrows-status {
      > li.is-dropdown-submenu-parent > a { // sass-lint:disable-line no-qualifying-elements
        position: relative;
        @if $dropdownmenu-arrow-padding != 0 {
          padding-#{$global-right}: $dropdownmenu-arrow-padding;
        }
      }

      > li.is-dropdown-submenu-parent > a::after { // sass-lint:disable-line no-qualifying-elements
        content: $dropdownmenu-arrows-down-content;
        #{$global-left}: auto; //??
        @if $dropdownmenu-arrows-down-margin-right != 0 {
          margin-#{$global-right}: $dropdownmenu-arrows-down-margin-right;
        }
        @if $dropdownmenu-arrow-size != $menu-font-size {
          font-size: $dropdownmenu-arrow-size;
          margin-top: -(($menu-font-size - $dropdownmenu-arrow-size) / 2);
          top: 50%;
        }
      }
    }
  } @else if $dir == vertical {
    > li {
      .is-dropdown-submenu {
        top: 0;
      }

      &.opens-left {
        > .is-dropdown-submenu {
          left: auto;
          right: 100%;
          top: 0; //??
        }
      }

      &.opens-right {
        > .is-dropdown-submenu {
          left: 100%;
          right: auto;
        }
      }

      @if $dropdownmenu-arrows-status {
        @include zf-dropdown-left-right-arrows;
      }
    }
  } @else {
    @warn 'The direction used for dropdown-menu-direction() must be horizontal or vertical.';
  }
}

@mixin foundation-dropdown-menu {
  .menu.dropdown {
    @include dropdown-menu-direction(horizontal);

    a {
      @include disable-mouse-outline;
    }

    // Top-level item
    > li > a {
      padding: $dropdownmenu-padding;
      @if $dropdownmenu-background != transparent {
        background: $dropdownmenu-background;
      }
    }

    // Top-level item active state
    > li.is-active > a {
      @if $dropdownmenu-background-active != transparent {
        background: $dropdownmenu-background-active;
      }
      @if $dropdownmenu-color-active != transparent {
        color: $dropdownmenu-color-active;
      }
    }

    // Submenu active state
    .is-dropdown-submenu .is-active > a {
      @if $dropdown-menu-item-background-active != transparent {
        background: $dropdown-menu-item-background-active;
      }
      @if $dropdown-menu-item-color-active != transparent {
        color: $dropdown-menu-item-color-active;
      }
    }

    .no-js & ul {
      display: none;
    }

    .nested.is-dropdown-submenu {
      @include menu-nested($dropdownmenu-nested-margin);
    }

    &.vertical {
      @include dropdown-menu-direction(vertical);
    }

    @each $size in $breakpoint-classes {
      @if $size != $-zf-zero-breakpoint {
        @include breakpoint($size) {
          &.#{$size}-horizontal {
            @include dropdown-menu-direction(horizontal);
          }

          &.#{$size}-vertical {
            @include dropdown-menu-direction(vertical);
          }
        }
      }
    }


    &.align-right {
      .is-dropdown-submenu.first-sub {
        left: auto;
        right: 0;
        top: 100%;
      }
    }
  }

  @if $dropdownmenu-vertical-status {
    .is-dropdown-menu.vertical {
      width: $dropdownmenu-width-when-vertical;

      &.align-right {
        float: right;
      }
    }
  }

  .is-dropdown-submenu-parent {
    position: relative;

    @if $dropdownmenu-arrows-status {
      a::after {
        position: absolute;
        right: 0;
        #{$global-left}: auto; //??
      }
    }

    &.opens-inner > .is-dropdown-submenu {
      top: 100%;
      @if $global-text-direction == 'rtl' {
        right: auto;
      } @else {
        left: auto;
      }
    }

    &.opens-left > .is-dropdown-submenu {
      left: auto;
      right: 100%;
    }

    &.opens-right > .is-dropdown-submenu {
      left: 100%;
      right: auto;
    }
  }

  .is-dropdown-submenu {
    #{$global-left}: 100%;
    display: none;
    list-style: none;
    // left: 100%;
    margin-#{$global-left}: 0;
    min-width: $dropdownmenu-min-width;
    position: absolute;
    top: 0;
    z-index: 1;
    @if $dropdownmenu-submenu-background != transparent {
      background: $dropdownmenu-submenu-background;
    }
    @if $dropdownmenu-border-status {
      border: $dropdownmenu-border;
    }
    @if $dropdownmenu-border-radius-status and ($dropdownmenu-border-radius != 0) {
      border-radius: $dropdownmenu-border-radius;
    }
    @if $dropdownmenu-shadow-status {
      box-shadow: $dropdownmenu-shadow;
    }

    .dropdown & a {
      padding: $dropdownmenu-submenu-padding;
    }

    .is-dropdown-submenu-parent {
      @if $dropdownmenu-arrows-status {
        @include zf-dropdown-left-right-arrows;
      }
    }

    @if (type-of($dropdownmenu-border-width) == 'number') {
      margin-top: (-$dropdownmenu-border-width);
    }

    > li {
      width: 100%;

      a {
        &:active,
        &:focus,
        &:hover {
          @if $dropdownmenu-hover-background != $dropdownmenu-background {
            background: $dropdownmenu-hover-background;
          }
          @if $dropdownmenu-hover-color != inherit {
            color: $dropdownmenu-hover-color;
          }
        }
      }
    }

    // &:not(.js-dropdown-nohover) > .is-dropdown-submenu-parent:hover > &, // why is this line needed? Opening is handled by JS and this causes some ugly flickering when the sub is re-positioned automatically...
    &.js-dropdown-active {
      display: block;
    }
  }
}
