// Foundation for Sites
// https://get.foundation
// Licensed under MIT Open Source

////////////////////////////////////////
/// @group button
////////////////////////////////////////

//--------------------------------------
// Colors
//
/// Default background color for buttons.
/// @type Color
$button-background: $global-button-background !default;

/// Background color on hover for buttons.
/// @type Color
$button-background-hover: $global-button-background-hover !default;

/// Font color for buttons.
/// @type List
$button-color: $global-button-color !default;

/// Alternative font color for buttons.
/// @type List
$button-color-alt: $global-button-color-alt !default;

/// opacity for a disabled button.
/// @type List
$button-opacity-disabled: $global-button-opacity-disabled !default;

/// Background color lightness on hover for buttons.
/// @type Number
$button-background-hover-lightness: $global-button-background-hover-lightness !default;

/// Color lightness on hover for hollow buttons.
/// @type Number
$button-hollow-hover-lightness: $global-button-hollow-hover-lightness !default;

/// Coloring classes. A map of classes to output in your CSS, like `.secondary`, `.success`, and so on.
/// @type Map
$button-palette: $foundation-palette !default;

$button-border-color: $global-button-border-color !default;
$button-border-color-hover-lightness: $global-button-border-color-hover-lightness !default;

//--------------------------------------
// Content
//

$button-dropdown-arrow-content: $global-button-dropdown-arrow-content !default;

//--------------------------------------
// Radius
//
/// Border radius for buttons, defaulted to global-radius.
/// @type Number
$button-radius: $global-radius !default;

//--------------------------------------
// Status
//
/// Default fill for buttons. Can either be `solid` or `hollow`.
/// @type Keyword
$button-fill: solid !default;

// $button-solid-with-hover-class-status: true !default;
$button-hollow-hover-solid: true !default;
$button-border-status: true !default;
$button-border-radius-status: true !default;
$button-dropdown-status: true !default;
$button-disabled-status: true !default;
$button-clear-status: true !default;
$button-color-strict-status: false !default;

//--------------------------------------
// Sizes
//
/// Font family for button elements.
/// @type Font
$button-font-family: inherit !default;

/// Margin around buttons.
/// @type List
$button-margin: 0 0 $global-margin 0 !default;

// Internal: flip from margin-right to margin-left for defaults
@if $global-text-direction == "rtl" {
  $button-margin: 0 0 $global-margin $global-margin !default;
}

/// Transitions for buttons.
/// @type List
$button-transition: background-color 0.25s ease-out, color 0.25s ease-out !default;

/// Additional responsive classes for .expanded
/// @type Boolean
$button-responsive-expanded: false !default;

/// Padding inside buttons.
/// @type List
$button-padding: 0.5em 1em !default;

$button-font-default: 1rem !default; // $base-font-size

/// Sizes for buttons.
/// @type Map
$button-sizes: (
  default: $button-font-default,
  tiny: $button-font-default -
  (
    $button-font-default / 6
  ),
  small: $button-font-default -
  (
    $button-font-default / 9
  ),
  large: $button-font-default +
  (
    $button-font-default / 6
  ),
) !default;

/// Border width for hollow outline buttons
/// @type Number
$button-hollow-border-width: $global-border-width !default;

/// Font weight for button elements.
/// Ignored if null (default)
/// @type Font-Weight
$button-font-weight: null !default;

/// Border for buttons, transparent by default
/// @type List
// $button-border: 1px solid transparent !default;

$button-border-width: $global-border-width !default;
$button-border-style: solid !default;
$button-border-hollow-style: solid !default;

$button-line-height: 1 !default;

$button-dropdown-arrow-font-size: rem-calc(10) !default;
$button-dropdown-arrow-padding-top: 0.1em !default;
$button-dropdown-arrow-margin-left-coefficient: 0.8 !default;
$button-arrow-only-side-margin: 0.2em !default;

////////////////////////////////////////
////////////////////////////////////////
////////////////////////////////////////
/// Button
////////////////////////////////////////

@mixin button-base {
  @include disable-mouse-outline;

  position: relative;
  display: inline-block;
  margin: $button-margin;
  font-weight: $button-font-weight;
  text-align: center;
  cursor: pointer;
  transition: $button-transition;

  @if $button-border-status {
    border: $button-border-width $button-border-style $button-border-color;
  }

  @else {
    border: 0;
  }

  @if ($button-border-radius-status) and ($button-radius != 0) {
    border-radius: $button-radius;
  }

  @if $button-font-family != inherit {
    font-family: $button-font-family;
  }

  @if $button-font-default != 1rem {
    font-size: map-get($button-sizes, default);
  }

  // @if $button-font-weight != normal {
  //   font-weight: $button-font-weight;
  // }

  @if $button-line-height != $global-lineheight {
    line-height: $button-line-height;
  }

  @if type-of($button-padding) == "map" {
    @each $breakpoint, $value in $button-padding {
      @include breakpoint($breakpoint) {
        padding: $value;
      }
    }
  }

  @else {
    padding: $button-padding;
  }

  //-webkit-appearance: none; // sass-lint:disable-line no-vendor-prefixes
  //vertical-align: middle;
}

/// Expands a button to make it full-width.
/// @param {Boolean} $expand [true] - Set to `true` to enable the expand behavior. Set to `false` to reverse this behavior.
@mixin button-expand($expand: true) {
  @if $expand {
    display: block;
    width: 100%;
    margin-right: 0;
    margin-left: 0;
  }
}

/// Sets the base styles of a hollow or clear button filling according to `$fill`.
/// See mixin `button-fill-style` for the filling styles.
/// @param {Keyword} $fill [$button-fill] - Type of filling between `hollow` and `clear`. `solid` has no effects.
@mixin button-fill($fill: $button-fill) {
  @if $fill == hollow {
    @include button-hollow;
  }

  @else if $fill == clear {
    @include button-clear;
  }
}

/// Sets the visual styles of a solid/hollow/clear button filling according to `$fill`.
/// See mixins `button-style`, `button-hollow-style` and `button-clear-style` for effects of visual styling parameters.
/// @param {Keyword} $fill [$button-fill] - Type of filling between `hollow` and `clear`.
/// @param {Color} $background [$button-background] - -
/// @param {Color} $background-hover [$button-background-hover] - -
/// @param {Color} $color [$button-color] - -
@mixin button-fill-style(
  $fill: $button-fill,
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color
) {
  @if $fill == solid {
    @include button-style($background, $background-hover, $color);
  }

  @else if $fill == hollow {
    @include button-hollow-style($background);
  }

  @else if $fill == clear {
    @include button-clear-style($background);
  }
}

/// Sets the visual style of a button.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
@mixin button-style(
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $background-hover-lightness: $button-background-hover-lightness
) {
  @if $color == auto {
    $color: color-pick-contrast(
      $background,
      ($button-color, $button-color-alt)
    );
  }

  @if $background-hover == auto {
    $background-hover: scale-color(
      $background,
      $lightness: $background-hover-lightness
    );
  }

  //@if lightness($background) >= 70% {
  //  $color: $button-color-alt;
  //} @else {
  //  $color: $button-color;
  //}

  // Default and disabled states
  &,
  &.disabled,
  &[disabled],
  &.disabled:hover,
  &[disabled]:hover,
  &.disabled:focus,
  &[disabled]:focus {
    @if $button-fill == hollow {
      color: $background;
      background-color: transparent;
    }

    @else {
      background-color: $background;

      @if $button-color-strict-status {
        color: $button-color;
      }

      @else {
        color: $color;
      }
    }
  }

  @if $button-border-status {
    border-color: scale-color(
      $background,
      $lightness: $button-border-color-hover-lightness
    );
  }

  @else {
    border: 0;
  }

  &:visited {
    @if $button-color-strict-status {
      color: $button-color;
    }

    @else {
      color: $color;
    }
  }

  &:hover,
  &:focus {
    z-index: 2;
    background-color: $background-hover;

    @if $button-color-strict-status {
      color: $button-color;
    }

    @else {
      color: $color;
    }
  }
}

/// Sets the base styles of a hollow button.
/// See mixin `button-hollow-style` for the filling styles.
@mixin button-hollow($background: $button-background) {
  &,
  &.disabled,
  &[disabled] {
    & {
      background-color: transparent;
    }

    @if $button-hollow-hover-solid {
      &:hover,
      &:focus {
        background-color: $background;
      }
    }

    @else {
      &:hover,
      &:focus {
        background-color: transparent;
      }
    }
  }
}

/// Sets the visual style of a hollow button.
/// @param {Color} $color [$button-background] - Text and border color of the button.
/// @param {Color} $hover-lightness [$button-hollow-hover-lightness] - Color lightness on hover.
/// @param {Color} $border-width [$button-hollow-border-width] - Border width of the button.
@mixin button-hollow-style(
  $color: $button-background,
  $hover-lightness: $button-hollow-hover-lightness,
  $border-width: $button-hollow-border-width
) {
  $color-hover: scale-color($color, $lightness: $hover-lightness);

  // Default and disabled states
  &,
  &.disabled,
  &[disabled],
  &.disabled:hover,
  &[disabled]:hover,
  &.disabled:focus,
  &[disabled]:focus {
    color: $color;
    border: $border-width $button-border-hollow-style $color;
  }

  &:visited {
    color: $color;
  }

  &:hover,
  &:focus {
    z-index: 2;

    @if $button-hollow-hover-solid {
      @if $button-color-strict-status {
        color: $button-color;
      }

      @else {
        color: color-pick-contrast($color, ($button-color, $button-color-alt));
      }

      background-color: $color;
    }

    @else {
      color: $color-hover;
    }

    @if $button-hollow-hover-solid {
      // border-color: scale-color(
      //   $color,
      //   $lightness: $button-border-color-hover-lightness
      // );

      border-color: $color;
    }

    @else {
      border-color: $color-hover;
    }
  }
}

/// Sets the base styles of a clear button.
/// See mixin `button-clear-style` for the filling styles.
@mixin button-clear {
  &,
  &.disabled,
  &[disabled] {
    &,
    &:hover,
    &:focus {
      background-color: transparent;
      border-color: transparent;
    }
  }
}

/// Sets the visual style of a clear button.
/// @param {Color} $color [$button-background] - Text color of the button.
/// @param {Color} $hover-lightness [$button-hollow-hover-lightness] - Color lightness on hover.
@mixin button-clear-style(
  $color: $button-background,
  $hover-lightness: $button-hollow-hover-lightness
) {
  $color-hover: scale-color($color, $lightness: $hover-lightness);

  // Default and disabled states
  &,
  &.disabled,
  &[disabled],
  &.disabled:hover,
  &[disabled]:hover,
  &.disabled:focus,
  &[disabled]:focus {
    color: $color;
  }

  &:hover,
  &:focus {
    color: $color-hover;
  }
}

/// Adds disabled styles to a button by fading the element and reseting the cursor.
/// @param {Number} $opacity [$button-opacity-disabled] - Opacity of the disabled button.
@mixin button-disabled($opacity: $button-opacity-disabled) {
  cursor: not-allowed;
  opacity: $button-opacity-disabled;
}

/// Adds a dropdown arrow to a button.
/// @param {Number} $size [0.4em] - Size of the arrow. We recommend using an `em` value so the triangle scales when used inside different sizes of buttons.
/// @param {Color} $color [white] - Color of the arrow.
/// @param {Number} $offset [$button-padding] - Distance between the arrow and the text of the button. Defaults to whatever the right padding of a button is.
@mixin button-dropdown(
  $offset: get-side($button-padding, right) *
  $button-dropdown-arrow-margin-left-coefficient
) {
  &::after {
    position: relative;
    display: inline-block;
    float: #{$global-right};
    content: $button-dropdown-arrow-content;

    @if ($button-dropdown-arrow-font-size != inherit) and
      ($button-dropdown-arrow-font-size != 1em)
    {
      font-size: $button-dropdown-arrow-font-size;

      @if $button-dropdown-arrow-font-size != $button-font-default {
        margin-top: (
          strip-unit(
            $button-font-default - $button-dropdown-arrow-font-size
          ) *
          1em
        ) /
          2 +
          $button-dropdown-arrow-padding-top;
      }
    }

    @if type-of($offset) == "map" {
      @each $breakpoint, $value in $offset {
        @include breakpoint($breakpoint) {
          margin-#{$global-left}: get-side($value, right) *
            $button-dropdown-arrow-margin-left-coefficient;
        }
      }
    }

    @else {
      margin-#{$global-left}: $offset;
    }

    //@include css-triangle($size, $color, down);
    //top: .4em; // Aligns the arrow with the text of the button
  }
}

/// Adds all styles for a button. For more granular control over styles, use the individual button mixins.
/// @param {Boolean} $expand [false] - Set to `true` to make the button full-width.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
/// @param {Keyword} $style [solid] - Set to `hollow` to create a hollow button. The color defined in `$background` will be used as the primary color of the button.
@mixin button(
  $expand: false,
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $style: $button-fill
) {
  @include button-base;

  // @if $style == solid {
  //   @include button-style($background, $background-hover, $color);
  // }

  // @else if $style == hollow {
  //   @include button-hollow($background);
  //   @include button-hollow-style($background);
  // }

  @include button-fill($style);
  @include button-fill-style($style, $background, $background-hover, $color);

  @if $expand {
    @include button-expand;
  }
}

@mixin foundation-button {
  .button {
    @include button($style: none);

    // Sizes
    @each $size, $value in map-remove($button-sizes, default) {
      &.#{$size} {
        font-size: $value;
      }
    }

    &.expanded {
      @include button-expand;
    }

    @if $button-responsive-expanded {
      @each $size in $breakpoint-classes {
        @include breakpoint(#{$size} only) {
          &.#{$size}-only-expanded {
            @include button-expand;
          }
        }

        @if $size != $-zf-zero-breakpoint {
          @include breakpoint(#{$size} down) {
            &.#{$size}-down-expanded {
              @include button-expand;
            }
          }

          @include breakpoint(#{$size}) {
            &.#{$size}-expanded {
              @include button-expand;
            }
          }
        }
      }
    }

    // Solid, hollow & clear styles
    @each $filling in (solid hollow clear) {
      $selector: if($button-fill == $filling, null, ".#{$filling}");

      &#{$selector} {
        @include button-fill($filling);
        @include button-fill-style($filling);

        @each $name, $color in $button-palette {
          &.#{$name} {
            @include button-fill-style($filling, $color, auto, auto);
          }
        }
      }
    }

    // // Hollow style
    // @if ($button-fill == solid) and
    //   ($button-solid-with-hover-class-status == true)
    // {
    //   &.hollow {
    //     @include button-hollow;
    //     @include button-hollow-style;

    //     @each $name, $color in $button-palette {
    //       &.#{$name} {
    //         @include button-hollow($color);
    //         @include button-hollow-style($color);
    //       }
    //     }
    //   }
    // }

    @if $button-disabled-status {
      // Disabled style
      &.disabled,
      &[disabled] {
        @include button-disabled;
      }
    }

    @if $button-dropdown-status {
      // Dropdown arrow
      &.dropdown {
        @include button-dropdown;

        @if $button-fill == hollow {
          &::after {
            border-top-color: $button-background;
          }
        }

        &.hollow,
        &.clear {
          &::after {
            border-top-color: $button-background;
          }

          @each $name, $color in $button-palette {
            &.#{$name} {
              &::after {
                border-top-color: $color;
              }
            }
          }
        }
      }

      // Button with dropdown arrow only
      &.arrow-only::after {
        float: none;

        @if type-of($button-padding) == "map" {
          @each $breakpoint, $value in $button-padding {
            @include breakpoint($breakpoint) {
              margin-#{$global-left}: $button-arrow-only-side-margin -
                (get-side($value, right));
            }
          }
        }

        @else {
          margin-#{$global-left}: $button-arrow-only-side-margin -
            (get-side($button-padding, right));
        }

        @if type-of($button-padding) == "map" {
          @each $breakpoint, $value in $button-padding {
            @include breakpoint($breakpoint) {
              margin-#{$global-right}: $button-arrow-only-side-margin -
                (get-side($value, right));
            }
          }
        }

        @else {
          margin-#{$global-right}: $button-arrow-only-side-margin -
            (get-side($button-padding, right));
        }

        @if $button-dropdown-arrow-font-size != $button-font-default {
          top: -(
            (
              strip-unit(
                $button-font-default - $button-dropdown-arrow-font-size
              ) *
              1em
            ) /
            2
          ) +
            ($button-dropdown-arrow-padding-top / 2);
          margin-top: 0;
          line-height: 0;
        }

        //top: .2em;
      }
    }

    // sass-lint:disable-line no-qualifying-elements
    &:hover,
    &:focus {
      text-decoration: none; //??
    }
  }

  // .button {
  //   // sass-lint:disable-line no-qualifying-elements
  //   &:hover,
  //   &:focus {
  //     text-decoration: none; //??
  //   }
  // }
}
