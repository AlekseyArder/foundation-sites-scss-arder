// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////////////////////////////////////////
/// @group button
////////////////////////////////////////

//--------------------------------------
// Colors
//
/// Default background color for buttons.
/// @type Color
$button-background: $global-button-background !default;

/// Background color on hover for buttons.
/// @type Color
$button-background-hover: $global-button-background-hover !default;

/// Font color for buttons.
/// @type List
$button-color: $global-button-color !default;

/// Alternative font color for buttons.
/// @type List
$button-color-alt: $global-button-color-alt !default;

/// opacity for a disabled button.
/// @type List
$button-opacity-disabled: $global-button-opacity-disabled !default;

/// Background color lightness on hover for buttons.
/// @type Number
$button-background-hover-lightness: $global-button-background-hover-lightness !default;

/// Color lightness on hover for hollow buttons.
/// @type Number
$button-hollow-hover-lightness: $global-button-hollow-hover-lightness !default;

/// Coloring classes. A map of classes to output in your CSS, like `.secondary`, `.success`, and so on.
/// @type Map
$button-palette: $foundation-palette !default;


$button-border-color: $global-button-border-color !default;


//--------------------------------------
// Content
//

$button-dropdown-arrow-content: $global-button-dropdown-arrow-content !default;


//--------------------------------------
// Radius
//
/// Border radius for buttons, defaulted to global-radius.
/// @type Number
$button-radius: 6px;//$global-radius !default;


//--------------------------------------
// Status
//
/// Default fill for buttons. Can either be `solid` or `hollow`.
/// @type Keyword
$button-fill: solid !default;


$button-hollow-hover-solid: true !default;
$button-border-status: true !default;
$button-border-radius-status: true !default;
$button-dropdown-status: true !default;
$button-disabled-status: true !default;


//--------------------------------------
// Sizes
//
/// Margin around buttons.
/// @type List
$button-margin: 0 0 $global-margin 0 !default;

// Internal: flip from margin-right to margin-left for defaults
@if $global-text-direction == 'rtl' {
  $button-margin: 0 0 $global-margin $global-margin !default;
}

/// transitions for buttons.
/// @type List
$button-transition: background-color .25s ease-out, color .25s ease-out !default;

/// Padding inside buttons.
/// @type List
$button-padding: .5em 1em !default;


$button-font-default: 1rem !default; // $base-font-size


/// Sizes for buttons.
/// @type Map
$button-sizes: (
  default: $button-font-default,
  tiny: $button-font-default - ($button-font-default / 6),
  small: $button-font-default - ($button-font-default / 9),
  large: $button-font-default + ($button-font-default / 6),
) !default;

/// Border width for hollow outline buttons
/// @type Number
$button-hollow-border-width: $global-border-width !default;


$button-line-height: 1 !default;
$button-font-weight: normal !default;

$button-border-width: $global-border-width !default;
$button-border-style: solid !default;
$button-border-hollow-style: solid !default;

$button-dropdown-arrow-font-size: rem-calc(10) !default;
$button-dropdown-arrow-padding-top: .1em !default;
$button-dropdown-arrow-margin-left: get-side($button-padding, right) * .8 !default;
$button-arrow-only-side-margin: .2em !default;


////////////////////////////////////////
////////////////////////////////////////
////////////////////////////////////////
/// Button
////////////////////////////////////////

// TODO: Document button-base() mixin
@mixin button-base {
  @include disable-mouse-outline;
  cursor: pointer;
  display: inline-block;
  margin: $button-margin;
  position: relative;
  text-align: center;
  transition: $button-transition;
  @if $button-border-status {
    border: $button-border-width $button-border-style $button-border-color;
  } @else {
    border: 0;
  }
  @if ($button-border-radius-status) and ($button-radius != 0) {
    border-radius: $button-radius;
  }
  @if $button-font-default != 1rem {
    font-size: map-get($button-sizes, default);
  }
  @if $button-font-weight != normal {
    font-weight: $button-font-weight;
  }
  @if $button-line-height != $global-lineheight {
    line-height: $button-line-height;
  }
  @if (type-of($button-padding) == 'map') {
    @each $size, $padding in $button-padding {
      @include breakpoint($size) {
        padding: $padding;
      }
    }
  } @else {
    padding: $button-padding;
  }

  //-webkit-appearance: none;
  //vertical-align: middle;
}

/// Expands a button to make it full-width.
/// @param {Boolean} $expand [true] - Set to `true` to enable the expand behavior. Set to `false` to reverse this behavior.
@mixin button-expand($expand: true) {
  @if $expand {
    display: block;
    margin-left: 0;
    margin-right: 0;
    width: 100%;
  }
}

/// Sets the visual style of a button.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
@mixin button-style(
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $background-hover-lightness: $button-background-hover-lightness ) {
  @if $color == auto {
    $color: color-pick-contrast($background, ($button-color, $button-color-alt));
  }

  @if $background-hover == auto {
    $background-hover: scale-color($background, $lightness: $background-hover-lightness);
  }

  //@if lightness($background) >= 70% {
  //  $color: $button-color-alt;
  //} @else {
  //  $color: $button-color;
  //}

  @if $button-hollow-hover-solid {
    background-color: transparent;
    color: $background;
  } @else {
    background-color: $background;
    color: $color;
  }

  @if ($button-border-status) and (not $button-hollow-hover-solid) {
    border-color: $background - 50%;
  } @else if $button-hollow-hover-solid {
    border-color: $background;
  } @else {
    border: 0;
  }

  &:visited {
    @if $button-hollow-hover-solid {
      color: $background;
    } @else {
      color: $color;
    }
  }

  &:hover,
  &:focus {
    color: $color;
    z-index: 2;
    @if $button-hollow-hover-solid {
      background-color: $background;
    } @else {
      background-color: $background-hover;
    }
  }
}

/// Removes background fill on hover and focus for hollow buttons.
@mixin button-hollow {
  &,
  &:hover,
  &:focus {
    background-color: transparent;
  }
}

@mixin button-hollow-style(
  $color: $primary-color,
  $hover-lightness: $button-hollow-hover-lightness,
  $border-width: $button-hollow-border-width ) {

  $color-hover: scale-color($color, $lightness: $hover-lightness);

  border: $border-width $button-border-hollow-style $color;
  color: $color;

  &:visited {
    color: $color;
  }

  &:hover,
  &:focus {
    border-color: $color-hover;
    z-index: 2;
  }
}

/// Adds disabled styles to a button by fading the element, reseting the cursor, and disabling pointer events.
/// @param [Color] $background [$primary-color] - Background color of the disabled button.
/// @param [Color] $color [$button-color] - Text color of the disabled button. Set to `auto` to have the mixin automatically generate a color based on the background color.
@mixin button-disabled(
  $background: $primary-color,
  $color: $button-color ) {

  cursor: not-allowed;
  @if $color == auto {
    $color: color-pick-contrast($background, ($button-color, $button-color-alt));
  }
  @if $button-opacity-disabled != 0 {
    opacity: $button-opacity-disabled;
  }

  &,
  &:hover,
  &:focus {
    background-color: $background;
    color: $color;
  }
}

/// Adds a dropdown arrow to a button.
/// @param {Number} $size [0.4em] - Size of the arrow. We recommend using an `em` value so the triangle scales when used inside different sizes of buttons.
/// @param {Color} $color [white] - Color of the arrow.
/// @param {Number} $offset [$button-padding] - Distance between the arrow and the text of the button. Defaults to whatever the right padding of a button is.
@mixin button-dropdown(
  //$size: .4em,
  //$color: $white,
  $offset: get-side($button-padding, right)) {

  &::after {
    content: $button-dropdown-arrow-content;
    display: inline-block;
    float: #{$global-right};
    margin-#{$global-left}: $button-dropdown-arrow-margin-left;
    position: relative;
    @if ($button-dropdown-arrow-font-size != inherit) and ($button-dropdown-arrow-font-size != 1em) {
      font-size: $button-dropdown-arrow-font-size;
      @if $button-dropdown-arrow-font-size != $button-font-default {
        margin-top: (strip-unit($button-font-default - $button-dropdown-arrow-font-size) * 1em) / 2 + $button-dropdown-arrow-padding-top;
      }
    }

    //@include css-triangle($size, $color, down);
    //top: .4em; // Aligns the arrow with the text of the button
  }
}

/// Adds all styles for a button. For more granular control over styles, use the individual button mixins.
/// @param {Boolean} $expand [false] - Set to `true` to make the button full-width.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
/// @param {Keyword} $style [solid] - Set to `hollow` to create a hollow button. The color defined in `$background` will be used as the primary color of the button.
@mixin button(
  $expand: false,
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $style: $button-fill ) {
  @include button-base;

  @if $style == solid {
    @include button-style($background, $background-hover, $color);
  } @else if $style == hollow {
    @include button-hollow;
    @include button-hollow-style($background);
  }

  @if $expand {
    @include button-expand;
  }
}

@mixin foundation-button {
  .button {
    @include button;

    // Sizes
    @each $size, $value in map-remove($button-sizes, default) {
      &.#{$size} {
        font-size: $value;
      }
    }

    &.expanded {
      @include button-expand;
    }

    // Colors
    @each $name, $color in $button-palette {
      @if $button-fill == solid {
        &.#{$name} {
          @include button-style($color, auto, auto);
        }
      } @else {
        &.#{$name} {
          @include button-hollow-style($color);
        }

        &.#{$name}.dropdown::after {
          border-top-color: $color;
        }
      }
    }

    // Hollow style
    @if $button-fill == hollow {
      &.hollow {
        @include button-hollow;
        @include button-hollow-style;

        @each $name, $color in $button-palette {
          &.#{$name} {
            @include button-hollow-style($color);
          }
        }
      }
    }

    @if $button-disabled-status {
      // Disabled style
      &.disabled,
      &[disabled] {
        @include button-disabled;

        @each $name, $color in $button-palette {
          &.#{$name} {
            @include button-disabled($color, auto);
          }
        }
      }
    }

    @if $button-dropdown-status {
      // Dropdown arrow
      &.dropdown {
        @include button-dropdown;

        @if $button-fill == hollow {
          &::after {
            border-top-color: $button-background;
          }
        }

        &.hollow {
          &::after {
            border-top-color: $button-background;
          }

          @each $name, $color in $button-palette {
            &.#{$name} {
              &::after {
                border-top-color: $color;
              }
            }
          }
        }
      }

      // Button with dropdown arrow only
      &.arrow-only::after {
        float: none;
        margin-#{$global-left}: $button-arrow-only-side-margin - (get-side($button-padding, right));
        margin-#{$global-right}: $button-arrow-only-side-margin - (get-side($button-padding, right));
        @if $button-dropdown-arrow-font-size != $button-font-default {
          line-height: 0;
          margin-top: 0;
          top: - ((strip-unit($button-font-default - $button-dropdown-arrow-font-size) * 1em) / 2) + ($button-dropdown-arrow-padding-top / 2);
        }

        //top: .2em;
      }
    }
  }

  button {
    font-family: inherit;
  }
}
